// ====== 逐位异或 ======
function Sys.xor 0
    // 异或公式：(a | b) & ~(a & b)
    push argument 0
    push argument 1
    or              // 计算 a | b
    push argument 0
    push argument 1
    and             // 计算 a & b
    not             // 取反得到 ~(a & b)
    and             // 最终结果 (a|b) & ~(a&b)
    return

// ====== 左移位 ======
function Sys.shiftLeft 2
    push argument 0
    pop local 0     // 保存原始数值 x
    push argument 1
    pop local 1     // 保存移位次数 y

label LOOP
    push local 1
    push constant 0
    eq              // 检查移位次数是否为0
    if-goto END
    push local 0
    push local 0
    add             // x = x * 2
    pop local 0
    push local 1
    push constant 1
    sub             // y--
    pop local 1
    goto LOOP
label END
    push local 0
    return

// ====== 奇偶校验 ======
function Sys.computeParity 4
    // 局部变量：0:循环计数器i, 1:校验位parity, 2:掩码mask, 3:处理后的输入
    push argument 0
    push constant 32767 // 0x7FFF 清除最高位
    and
    pop local 3

    push constant 0
    pop local 1      // parity初始化为0
    push constant 0
    pop local 0      // i从0开始

label LOOP
    push local 0
    push constant 15
    lt               // 检查是否循环15次
    if-goto BODY
    goto END

label BODY
    // 生成掩码 1 << i
    push constant 1
    push local 0
    call Sys.shiftLeft 2
    pop local 2

    // 检查当前位是否为1
    push local 3
    push local 2
    and
    push constant 0
    eq
    if-goto SKIP

    // 更新奇偶校验位
    push local 1
    push constant 1
    call Sys.xor 2
    pop local 1

label SKIP
    push local 0
    push constant 1
    add
    pop local 0
    goto LOOP

label END
    push local 1
    return

// ====== 奇偶校验编码 ======
function Sys.encode 2
    push argument 0
    pop local 0      // 保存原始输入
    push argument 0
    call Sys.computeParity 1
    pop local 1      // 保存校验位

    // 清除最高位并设置新校验位
    push local 0
    push constant 32767  // 清除最高位
    and
    push local 1
    push constant 0
    eq
    if-goto NO_SET
    // 使用位操作设置最高位
    push constant 1
    push constant 15     // 左移15位得到最高位-32767(32768)
    call Sys.shiftLeft 2
    or                   // 用 OR 操作设置最高位

label NO_SET
    return

function Sys.init 0
    call Sys.encode 1